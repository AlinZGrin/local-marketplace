name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  # Test and Build Job
  test-and-build:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: marketplace_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup environment
        run: |
          cp .env.example .env.local
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/marketplace_test" >> .env.local
          echo "NEXTAUTH_SECRET=test-secret-key" >> .env.local

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Run database migrations
        run: npm run db:push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/marketplace_test

      - name: Type checking
        run: npm run type-check

      - name: ESLint checking
        run: npm run lint

      - name: Build application
        run: npm run build
        env:
          NEXTAUTH_SECRET: test-secret-key
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/marketplace_test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: build-files
          path: |
            .next/
            public/

  # Security audit
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

  # Deploy to staging (develop branch)
  deploy-staging:
    needs: [test-and-build, security-audit]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files

      - name: Deploy to Staging
        env:
          DEPLOY_WEBHOOK: ${{ secrets.STAGING_DEPLOY_WEBHOOK }}
        run: |
          if [ -n "$DEPLOY_WEBHOOK" ]; then
            curl -X POST "$DEPLOY_WEBHOOK"
          else
            echo "Staging deployment webhook not configured"
          fi

  # Deploy to production (main branch)
  deploy-production:
    needs: [test-and-build, security-audit]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files

      - name: Deploy to Production
        env:
          DEPLOY_WEBHOOK: ${{ secrets.PRODUCTION_DEPLOY_WEBHOOK }}
        run: |
          if [ -n "$DEPLOY_WEBHOOK" ]; then
            curl -X POST "$DEPLOY_WEBHOOK"
          else
            echo "Production deployment webhook not configured"
          fi

      - name: Create Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated release from main branch
            Commit: ${{ github.sha }}
          draft: false
          prerelease: false