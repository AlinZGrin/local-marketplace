// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  location      String?
  phoneNumber   String?
  rating        Float     @default(0)
  totalRatings  Int       @default(0)
  isSuspended   Boolean   @default(false)
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  listings      Listing[]
  sentMessages  Message[] @relation("SentMessages")
  offers        Offer[]
  reports       Report[]
  ratings       Rating[]  @relation("UserRatings")
  givenRatings  Rating[]  @relation("GivenRatings")
  adminActions  AdminAction[]
  notifications Notification[]
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  slug     String    @unique
  listings Listing[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Listing {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  price       Int
  condition   String   // "NEW", "LIKE_NEW", "GOOD", "FAIR", "POOR"
  images      String[] // PostgreSQL supports arrays
  locationLat Float
  locationLng Float
  address     String?
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  status      String   @default("ACTIVE") // "ACTIVE", "SOLD", "INACTIVE", "SUSPENDED", "DELETED"
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId     String
  categoryId String

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])

  offers        Offer[]
  reports       Report[]
  ratings       Rating[]
  notifications Notification[]

  @@index([userId])
  @@index([categoryId])
  @@index([isActive])
  @@index([isFeatured])
  @@index([createdAt])
}

model MessageThread {
  id        String   @id @default(cuid())
  listingId String
  buyerId   String
  sellerId  String
  lastMessageAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]

  @@unique([listingId, buyerId, sellerId])
  @@index([buyerId])
  @@index([sellerId])
  @@index([lastMessageAt])
}

model Message {
  id       String      @id @default(cuid())
  threadId String
  senderId String
  content  String      @db.Text
  type     String      @default("TEXT") // "TEXT", "OFFER", "IMAGE", "SYSTEM"
  metadata Json?       // PostgreSQL supports JSON
  isRead   Boolean     @default(false)
  createdAt DateTime   @default(now())

  thread MessageThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  sender User          @relation("SentMessages", fields: [senderId], references: [id])

  @@index([threadId])
  @@index([senderId])
  @@index([createdAt])
}

model Offer {
  id        String   @id @default(cuid())
  amount    Int
  message   String?
  status    String   @default("PENDING") // "PENDING", "ACCEPTED", "DECLINED", "EXPIRED", "WITHDRAWN"
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listingId String
  buyerId   String

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  buyer   User    @relation(fields: [buyerId], references: [id])

  @@index([listingId])
  @@index([buyerId])
  @@index([status])
}

model Rating {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())

  listingId String?
  userId    String  // User being rated
  raterId   String  // User giving the rating

  listing Listing? @relation(fields: [listingId], references: [id])
  user    User     @relation("UserRatings", fields: [userId], references: [id])
  rater   User     @relation("GivenRatings", fields: [raterId], references: [id])

  @@index([userId])
  @@index([raterId])
}

model Report {
  id          String   @id @default(cuid())
  type        String   // "INAPPROPRIATE_CONTENT", "SPAM", "FRAUD", "HARASSMENT", "FAKE_LISTING", "OTHER"
  reason      String
  description String?  @db.Text
  status      String   @default("PENDING") // "PENDING", "INVESTIGATING", "RESOLVED", "DISMISSED"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reporterId String
  listingId  String?
  reportedUserId String?

  reporter     User     @relation(fields: [reporterId], references: [id])
  listing      Listing? @relation(fields: [listingId], references: [id])
  adminAction  AdminAction?

  @@index([reporterId])
  @@index([listingId])
  @@index([status])
}

model AdminAction {
  id        String   @id @default(cuid())
  type      String   // "SUSPEND_USER", "UNSUSPEND_USER", "DELETE_LISTING", etc.
  reason    String?
  details   Json?    // PostgreSQL supports JSON
  createdAt DateTime @default(now())

  adminId  String
  userId   String?
  listingId String?
  reportId String? @unique

  admin  User    @relation(fields: [adminId], references: [id])
  report Report? @relation(fields: [reportId], references: [id])

  @@index([adminId])
  @@index([userId])
  @@index([createdAt])
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // "NEW_MESSAGE", "NEW_OFFER", "OFFER_ACCEPTED", etc.
  title     String
  content   String   @db.Text
  isRead    Boolean  @default(false)
  metadata  Json?    // PostgreSQL supports JSON
  createdAt DateTime @default(now())

  userId    String
  listingId String?

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing? @relation(fields: [listingId], references: [id])

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}